---
name: secure Docker registry
description: The Docker registry image fronted by an nginx SSL proxy container
keywords: registry
type: Default
documentation: |-
  We recommend reading: http://www.centurylinklabs.com/tutorials/how-to-secure-your-private-docker-registry/
  
  #Instructions#
  ##Set the PUBLIC_IP_ADDR##
  This can be a CNAME or public IP address of the server the registry will be running on.

  ##Generate the Basic auth credentials##
  Create a ```.htpasswd``` file to hold the authentication credentials. Save the file to be passed in as a volume in the template.
  ```
  $ htpasswd -c ~/my-registry.htpasswd USERNAME
  $ # then enter password at prompt
  ```

  ##Generate the self-signed SSL certificate##
  Save the certs directory to be used in the volume mounts of the template as well.
  ```
  $ mkdir ~/certs\n
  # the value for COMMAN_NAME should be updated to match the public CNAME or IP address of the server hosting the registry.\n
  $ docker run --rm  -e COMMON_NAME=66.555.98.212 -e KEY_NAME=my-registry -v ~/certs:/certs centurylink/openssl\n

  # check that the container is running:
  $ docker ps | grep registry
  803c77e2f328        registry:latest                          "docker-registry"      19 minutes ago      Up 19 minutes       5000/tcp                                  			registry
  ```
images:
- name: registry_0.9.0
  source: registry:0.9.0
  type: Default
- name: centurylinklabs_nginx-ssl-proxy
  source: centurylinklabs/nginx-ssl-proxy:latest
  type: Default
  ports:
  - host_port: '8080'
    container_port: '8080'
    proto: TCP
  links:
  - service: registry_0.9.0
    alias: registry
  environment:
  - variable: PUBLIC_IP_ADDR
    value: 66.555.98.212
  volumes:
  - host_path: "./certs/my-registry.crt"
    container_path: "/etc/ssl/certs/docker-registry"
  - host_path: "./certs/my-registry.key"
    container_path: "/etc/ssl/private/docker-registry"
  - host_path: "./my-registry.htpasswd"
    container_path: "/etc/nginx/docker-registry.htpasswd"
